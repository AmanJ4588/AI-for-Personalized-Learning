import streamlit as st
import requests 

BACKEND_URL = "http://127.0.0.1:5000"

# Language Dictionary (Static Text)
LANGUAGES = {
    "English": {
        "title": "ЁЯУЭ Generate a Custom Quiz",
        "description": "Fill in the details below to generate a personalized quiz.",
        "subject": "Enter the subject for the quiz (e.g., Math, Science, History)",
        "topic": "Enter the specific topic within the subject (e.g., Algebra, Newton's Laws)",
        "easy_questions": "How many easy questions?",
        "medium_questions": "How many medium questions?",
        "hard_questions": "How many hard questions?",
        "generate_button": "Generate Quiz",
        "quiz_generated": "тЬЕ Quiz Generated for",
        "error": "тЭМ Please enter both the subject and topic to proceed.",
        "no_data": "тЪая╕П No quiz data received. Please try again.",
        "submit": "Submit Answers",
        "correct": "тЬЕ Correct!",
        "incorrect": "тЭМ Incorrect! The correct answer is",
        "no_answer": "тЪая╕П No answer selected!",
        "score": "ЁЯОп You scored",
    },
    "рд╣рд┐рдиреНрджреА": {
        "title": "ЁЯУЭ рдПрдХ рдХрд╕реНрдЯрдо рдХреНрд╡рд┐рдЬрд╝ рдмрдирд╛рдПрдВ",
        "description": "рдПрдХ рд╡реНрдпрдХреНрддрд┐рдЧрдд рдХреНрд╡рд┐рдЬрд╝ рдЙрддреНрдкрдиреНрди рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдиреАрдЪреЗ рд╡рд┐рд╡рд░рдг рднрд░реЗрдВред",
        "subject": "рдХреНрд╡рд┐рдЬрд╝ рдХреЗ рд▓рд┐рдП рд╡рд┐рд╖рдп рджрд░реНрдЬ рдХрд░реЗрдВ (рдЬреИрд╕реЗ, рдЧрдгрд┐рдд, рд╡рд┐рдЬреНрдЮрд╛рди, рдЗрддрд┐рд╣рд╛рд╕)",
        "topic": "рд╡рд┐рд╖рдп рдХреЗ рднреАрддрд░ рд╡рд┐рд╢рд┐рд╖реНрдЯ рдЯреЙрдкрд┐рдХ рджрд░реНрдЬ рдХрд░реЗрдВ (рдЬреИрд╕реЗ, рдмреАрдЬрдЧрдгрд┐рдд, рдиреНрдпреВрдЯрди рдХреЗ рдирд┐рдпрдо)",
        "easy_questions": "рдЖрд╕рд╛рди рдкреНрд░рд╢реНрди рдХрд┐рддрдиреЗ рдЪрд╛рд╣рд┐рдП?",
        "medium_questions": "рдордзреНрдпрдо рдХрдард┐рдирд╛рдИ рдХреЗ рдкреНрд░рд╢реНрди рдХрд┐рддрдиреЗ рдЪрд╛рд╣рд┐рдП?",
        "hard_questions": "рдХрдард┐рди рдкреНрд░рд╢реНрди рдХрд┐рддрдиреЗ рдЪрд╛рд╣рд┐рдП?",
        "generate_button": "рдХреНрд╡рд┐рдЬрд╝ рдмрдирд╛рдПрдВ",
        "quiz_generated": "тЬЕ рдХреНрд╡рд┐рдЬрд╝ рдЙрддреНрдкрдиреНрди рдХрд┐рдпрд╛ рдЧрдпрд╛",
        "error": "тЭМ рдХреГрдкрдпрд╛ рд╡рд┐рд╖рдп рдФрд░ рдЯреЙрдкрд┐рдХ рджреЛрдиреЛрдВ рджрд░реНрдЬ рдХрд░реЗрдВред",
        "no_data": "тЪая╕П рдХреЛрдИ рдХреНрд╡рд┐рдЬрд╝ рдбреЗрдЯрд╛ рдкреНрд░рд╛рдкреНрдд рдирд╣реАрдВ рд╣реБрдЖред рдХреГрдкрдпрд╛ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред",
        "submit": "рдЙрддреНрддрд░ рд╕рдмрдорд┐рдЯ рдХрд░реЗрдВ",
        "correct": "тЬЕ рд╕рд╣реА!",
        "incorrect": "тЭМ рдЧрд▓рдд! рд╕рд╣реА рдЙрддреНрддрд░ рд╣реИ",
        "no_answer": "тЪая╕П рдХреЛрдИ рдЙрддреНрддрд░ рдЪрдпрдирд┐рдд рдирд╣реАрдВ рдХрд┐рдпрд╛ рдЧрдпрд╛!",
        "score": "ЁЯОп рдЖрдкрдХрд╛ рд╕реНрдХреЛрд░",
    },
    "родрооро┐ро┤рпН": {
        "title": "ЁЯУЭ родройро┐рокрпНрокропройрпН ро╡ро┐ройро╛роЯро┐ро╡ро┐ройро╛ роЙро░рпБро╡ро╛роХрпНроХро╡рпБроорпН",
        "description": "родройро┐рокрпНрокроЯрпНроЯ ро╡ро┐ройро╛роЯро┐ро╡ро┐ройро╛ роЙро░рпБро╡ро╛роХрпНроХ роХрпАро┤рпЗ роЙро│рпНро│ ро╡ро┐ро╡ро░роЩрпНроХро│рпИ роиро┐ро░рокрпНрокро╡рпБроорпН.",
        "subject": "рокро╛роЯродрпНродрпИ роЙро│рпНро│ро┐роЯро╡рпБроорпН (роО.роХро╛., роХрогро┐родроорпН, роЕро▒ро┐ро╡ро┐ропро▓рпН, ро╡ро░ро▓ро╛ро▒рпБ)",
        "topic": "роХрпБро▒ро┐рокрпНрокро┐роЯрпНроЯ родро▓рпИрокрпНрокрпИ роЙро│рпНро│ро┐роЯро╡рпБроорпН (роО.роХро╛., роХрогро┐род роХрпЛроЯрпНрокро╛роЯрпБ, роиро┐ропрпВроЯрпНроЯройро┐ройрпН ро╡ро┐родро┐роХро│рпН)",
        "easy_questions": "роОро│ро┐роп роХрпЗро│рпНро╡ро┐роХро│рпН роОродрпНродройрпИ?",
        "medium_questions": "роироЯрпБродрпНродро░роХрпН роХроЯро┐ройроорпН роОродрпНродройрпИ?",
        "hard_questions": "роХроЯро┐ройрооро╛рой роХрпЗро│рпНро╡ро┐роХро│рпН роОродрпНродройрпИ?",
        "generate_button": "ро╡ро┐ройро╛роЯро┐ро╡ро┐ройро╛ роЙро░рпБро╡ро╛роХрпНроХро╡рпБроорпН",
        "quiz_generated": "тЬЕ ро╡ро┐ройро╛роЯро┐ро╡ро┐ройро╛ роЙро░рпБро╡ро╛роХрпНроХрокрпНрокроЯрпНроЯродрпБ",
        "error": "тЭМ родропро╡рпБроЪрпЖропрпНродрпБ рокро╛роЯродрпНродрпИропрпБроорпН родро▓рпИрокрпНрокрпИропрпБроорпН роЙро│рпНро│ро┐роЯро╡рпБроорпН.",
        "no_data": "тЪая╕П ро╡ро┐ройро╛роЯро┐ро╡ро┐ройро╛ родро░ро╡рпБ роХро┐роЯрпИроХрпНроХро╡ро┐ро▓рпНро▓рпИ. родропро╡рпБроЪрпЖропрпНродрпБ роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН.",
        "submit": "рокродро┐ро▓рпНроХро│рпИ роЪрооро░рпНрокрпНрокро┐роХрпНроХро╡рпБроорпН",
        "correct": "тЬЕ роЪро░ро┐ропро╛рой рокродро┐ро▓рпН!",
        "incorrect": "тЭМ родро╡ро▒ро╛рой рокродро┐ро▓рпН! роЪро░ро┐ропро╛рой рокродро┐ро▓рпН",
        "no_answer": "тЪая╕П роОроирпНрод рокродро┐ро▓рпБроорпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХрокрпНрокроЯро╡ро┐ро▓рпНро▓рпИ!",
        "score": "ЁЯОп роЙроЩрпНроХро│рпН роородро┐рокрпНрокрпЖрогрпН",
    }
}

def quiz_page():
    # Language selection dropdown
    lang_options = {"English": "en", "рд╣рд┐рдиреНрджреА": "hi", "родрооро┐ро┤рпН": "ta"}
    lang_choice = st.sidebar.selectbox("ЁЯМН Select Language:", list(lang_options.keys()))
    

    lang = LANGUAGES[lang_choice]

    st.title(lang["title"])
    st.write(lang["description"])

    # Subject and topic inputs
    subject = st.text_input(lang["subject"])
    topic = st.text_input(lang["topic"])

    # Number of questions per difficulty level
    easy_questions = st.number_input(lang["easy_questions"], min_value=0, step=1, value=5)
    medium_questions = st.number_input(lang["medium_questions"], min_value=0, step=1, value=5)
    hard_questions = st.number_input(lang["hard_questions"], min_value=0, step=1, value=5)

    # Initialize session state for answers and submission
    if "quiz_data" not in st.session_state:
        st.session_state.quiz_data = []
    if "user_answers" not in st.session_state:
        st.session_state.user_answers = {}

    # Generate quiz button
    if st.button(lang["generate_button"]):
        if not subject or not topic:
            st.error(lang["error"])
        else:
            payload = {
                "subject": subject,
                "topic": topic,
                "easy_questions": easy_questions,
                "medium_questions": medium_questions,
                "hard_questions": hard_questions
            }

            try:
                response = requests.post(f"{BACKEND_URL}/generate_quiz", json=payload)
                if response.status_code == 200:
                    st.session_state.quiz_data = response.json().get("quiz", [])
                    st.session_state.user_answers = {}  # Reset previous answers
                    if st.session_state.quiz_data:
                        st.success(f"{lang['quiz_generated']} {subject} - {topic}")
                    else:
                        st.error(lang["no_data"])

                else:
                    st.error(f"тЭМ Error: {response.json().get('error', 'Unknown error')}")

            except requests.exceptions.RequestException as e:
                st.error(f"тЭМ Server connection failed: {e}")

    # Display quiz if available
    if st.session_state.quiz_data:
        st.subheader("ЁЯУМ " + lang["title"])
        for i, q in enumerate(st.session_state.quiz_data, 1):
            st.write(f"**Q{i}: {q['question']}**")
            st.session_state.user_answers[i] = st.radio(
                f"Q{i}:",
                options=list(q["options"].keys()),
                format_func=lambda x: f"{x}: {q['options'][x]}",
                index=None,
                key=f"q{i}"
            )
            st.markdown("---")

        # Submit answers button
        if st.button(lang["submit"]):
            score = 0
            total = len(st.session_state.quiz_data)
            for i, q in enumerate(st.session_state.quiz_data, 1):
                selected = st.session_state.user_answers.get(i)
                correct = q["correct_option"]
                if selected:
                    if selected == correct:
                        score += 1
                        st.success(f"тЬЕ Q{i}: {lang['correct']}")
                    else:
                        st.error(f"тЭМ Q{i}: {lang['incorrect']} {correct}: {q['options'][correct]}")
                else:
                    st.warning(f"тЪая╕П Q{i}: {lang['no_answer']}")

            st.info(f"ЁЯОп {lang['score']} **{score}/{total}**!")

